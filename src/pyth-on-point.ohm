PythOnPoint {
  Program         = Statement+

  Statement       = VariableDeclaration
                  | VariableReassignment
                  | NaturalLanguageFunctionDefinition
                  | PredictiveLoop
                  | ComparisonStatement
                  | PrintStatement
                  | ReturnStatement
                  | YieldStatement
                  | FunctionStatement
                  | GeneratorStatement

  VariableDeclaration = let variable "=" bool
                      | let variable "=" FunctionStatement
                      | let variable "=" Expression 
                      
  VariableReassignment = variable "=" bool
                       | variable "=" FunctionStatement
                       | variable "=" Expression

  NaturalLanguageFunctionDefinition = define functionName "(" Parameters ")" then FunctionBody 
                   
  PredictiveLoop  = for variable in "predictive_range(" Expression "," Expression "," patternType ")" "{" LoopBody "}"

  GeneratorStatement = for variable in FunctionStatement then "{" PrintStatement "}"
  
  ComparisonStatement = compare Expression to Expression

  ComparisonStatement2 = Expression "==" Expression

  PrintStatement  = print (FunctionStatement | Expression)
  ReturnStatement = return (FunctionStatement | Expression | ComparisonStatement | ComparisonStatement2)
  YieldStatement  = yield Expression
  FunctionStatement = functionName "(" Parameters ")"
  IfStatement = if Expression then

  functionName    = alnum+
  Parameters      = ListOf<Parameter, ",">
  Parameter       = variable "=" literal --default
                  | variable             --variable
 

  FunctionBody    = Statement+

  patternType     = "prime" | "fibonacci" | "factorial"
  LoopBody        = Statement+
  IfBody          = Statement+

  Expression      = Expression binaryOp Expression   --binary
                  | number
                  | string
                  | variable                         --use
                  | "(" Expression ")"               --parens

  number          = digit+
  string          = "\"" (~"\"" any)* "\""
  variable        = alnum+
  arithOp         = "+" | "-" | "*" | "/" 
  logicalOp       = "and" | "or" | "%"
  conditionalOp   = "<=" | ">=" | "==" | "&" | "|" | ">" | "<"
  binaryOp        = arithOp | logicalOp | conditionalOp
  literal = number | string
  bool = "true" | "True" | "false" | "False"

  print = "print" ~alnum
  for = "for" ~alnum
  return = "return" ~alnum
  in = "in" ~alnum
  let = "let" ~alnum
  then = "then" ~alnum
  if = "if" ~alnum
  compare = "compare" ~alnum
  to = "to" ~alnum
  define = "define" ~alnum
  yield = "yield" ~alnum
}
