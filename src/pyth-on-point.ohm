PythOnPoint {
  Program         = Statement+

  Statement       = NaturalLanguageFunctionDefinition
                  | PredictiveLoop
                  | ComparisonStatement
                  | PrintStatement
                  | ReturnStatement
                  | YieldStatement

  NaturalLanguageFunctionDefinition
                  = "define" FunctionName "(" Parameters ")" "then" FunctionBody
                   
  PredictiveLoop  = "for" variable "in" PredictiveRange "(" RangeParams ")" "{" LoopBody "}"
  
  ComparisonStatement
                  = "compare" Expression "to" Expression

  PrintStatement  = "print" Expression
  ReturnStatement = "return" Expression
  YieldStatement  = "yield" Expression

  FunctionName    = letter+
  Parameters      = ListOf<Parameter, ",">
  Parameter       = variable
  FunctionBody    = Statement+

  PredictiveRange = "predictive_range"
  RangeParams     = number "," number "," PatternType
  PatternType     = "prime" | "fibonacci" | "factorial"
  LoopBody        = Statement+

  Expression      = Expression binaryOp Expression   --binary
                  | number
                  | string
                  | variable
                  | "(" Expression ")"               --parens

  number          = digit+
  string          = "\"" letter+ "\""
  variable        = letter+
  binaryOp        = "+" | "-" | "*" | "/" | "and" | "or"
}

